{"id":"node_modules/pixi.js/lib/scene/graphics/shared/svg/utils/extractSvgUrlId.mjs","dependencies":[{"name":"/home/flamcom27/Projects/flappy_bird_clone/node_modules/pixi.js/lib/scene/graphics/shared/svg/utils/extractSvgUrlId.mjs.map","includedInParent":true,"mtime":1755802195551},{"name":"/home/flamcom27/Projects/flappy_bird_clone/package.json","includedInParent":true,"mtime":1757622785544},{"name":"/home/flamcom27/Projects/flappy_bird_clone/node_modules/pixi.js/package.json","includedInParent":true,"mtime":1755802195498}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractSvgUrlId = extractSvgUrlId;\nfunction extractSvgUrlId(url) {\n  const match = url.match(/url\\s*\\(\\s*['\"]?\\s*#([^'\"\\s)]+)\\s*['\"]?\\s*\\)/i);\n  return match ? match[1] : \"\";\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":23,"column":7},"generated":{"line":7,"column":0}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":23,"column":16},"generated":{"line":7,"column":9}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":23,"column":16},"generated":{"line":7,"column":24}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":23,"column":32},"generated":{"line":7,"column":25}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":7,"column":28}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":7,"column":30}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":26,"column":10},"generated":{"line":8,"column":2}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":26,"column":10},"generated":{"line":8,"column":8}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":26,"column":10},"generated":{"line":8,"column":13}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":26,"column":18},"generated":{"line":8,"column":16}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":26,"column":22},"generated":{"line":8,"column":19}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":26,"column":22},"generated":{"line":8,"column":20}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":26,"column":22},"generated":{"line":8,"column":25}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":26,"column":28},"generated":{"line":8,"column":26}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":26,"column":75},"generated":{"line":8,"column":73}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":26,"column":75},"generated":{"line":8,"column":74}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":28,"column":11},"generated":{"line":9,"column":2}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":28,"column":11},"generated":{"line":9,"column":9}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":28,"column":11},"generated":{"line":9,"column":14}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":28,"column":19},"generated":{"line":9,"column":17}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":28,"column":25},"generated":{"line":9,"column":22}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":28,"column":25},"generated":{"line":9,"column":23}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":28,"column":26},"generated":{"line":9,"column":24}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":28,"column":30},"generated":{"line":9,"column":25}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":28,"column":30},"generated":{"line":9,"column":28}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":28,"column":30},"generated":{"line":9,"column":30}},{"source":"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":10,"column":0}}],"sources":{"../../../../../../src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts":"/**\n * Extracts the ID from an SVG url() reference.\n *\n * This function handles all valid SVG url() formats including:\n * - url(#id)\n * - url('#id')\n * - url(\"#id\")\n * - url( #id )\n * - url( '#id' )\n * - url( \"#id\" )\n *\n * The regex pattern matches:\n * - url followed by optional whitespace\n * - opening parenthesis followed by optional whitespace\n * - optional single or double quotes with optional whitespace\n * - # followed by the ID (any chars except quotes, whitespace, or closing paren)\n * - optional single or double quotes with optional whitespace\n * - closing parenthesis\n * @param url - The SVG url() string to parse\n * @returns The extracted ID string, or empty string if no valid ID found\n * @internal\n */\nexport function extractSvgUrlId(url: string): string\n{\n    // Handle all valid SVG url() formats\n    const match = url.match(/url\\s*\\(\\s*['\"]?\\s*#([^'\"\\s)]+)\\s*['\"]?\\s*\\)/i);\n\n    return match ? match[1] : '';\n}\n"},"lineCount":null}},"error":null,"hash":"2c3f85dc2f8c25db2c32ed29111366dd","cacheData":{"env":{}}}